#pragma kernel CSMain
#pragma kernel ClearDiscardedVoxels
#pragma kernel FindSurfacePoints

shared static const int numThreads = 8;

struct Voxel
{
	float value;
	float discarded;
};

struct Vert
{
	float4 position;
	float3 normal;
	float3 uv;
	float discardTime;
};

struct Triangle
{
	Vert v1;
	Vert v2;
	Vert v3;
};

shared SamplerState _LinearClamp;

shared int numPointsPerAxis;
shared float boundsSize;
shared float3 centre;

shared StructuredBuffer<int> TriangleConnectionTable;
shared StructuredBuffer<int> CubeEdgeFlags;

shared RWStructuredBuffer<Voxel> _Voxels;
shared Texture3D<float3> _Normals;
shared AppendStructuredBuffer<Triangle> _Vertices;

int indexFromCoord(uint x, uint y, uint z) {
	return z * numPointsPerAxis * numPointsPerAxis + y * numPointsPerAxis + x;
}

// edgeConnection lists the index of the endpoint vertices for each of the 12 edges of the cube
shared static int2 edgeConnection[12] =
{
	int2(0,1), int2(1,2), int2(2,3), int2(3,0), int2(4,5), int2(5,6), int2(6,7), int2(7,4), int2(0,4), int2(1,5), int2(2,6), int2(3,7)
};

// edgeDirection lists the direction vector (vertex1-vertex0) for each edge in the cube
shared static float3 edgeDirection[12] =
{
	float3(1.0f, 0.0f, 0.0f),float3(0.0f, 1.0f, 0.0f),float3(-1.0f, 0.0f, 0.0f),float3(0.0f, -1.0f, 0.0f),
    float3(1.0f, 0.0f, 0.0f),float3(0.0f, 1.0f, 0.0f),float3(-1.0f, 0.0f, 0.0f),float3(0.0f, -1.0f, 0.0f),
    float3(0.0f, 0.0f, 1.0f),float3(0.0f, 0.0f, 1.0f),float3(0.0f, 0.0f, 1.0f),float3(0.0f,  0.0f, 1.0f)
};

// vertexOffset lists the positions, relative to vertex0, of each of the 8 vertices of a cube
shared static float3 vertexOffset[8] =
{
	float3(0, 0, 0),float3(1, 0, 0),float3(1, 1, 0),float3(0, 1, 0),
    float3(0, 0, 1),float3(1, 0, 1),float3(1, 1, 1),float3(0, 1, 1)
};

void FillCube(int x, int y, int z, out float cube[8])
{
	cube[0] = _Voxels[x + y * numPointsPerAxis + z * numPointsPerAxis * numPointsPerAxis].value;
	cube[1] = _Voxels[(x + 1) + y * numPointsPerAxis + z * numPointsPerAxis * numPointsPerAxis].value;
	cube[2] = _Voxels[(x + 1) + (y + 1) * numPointsPerAxis + z * numPointsPerAxis * numPointsPerAxis].value;
	cube[3] = _Voxels[x + (y + 1) * numPointsPerAxis + z * numPointsPerAxis * numPointsPerAxis].value;

	cube[4] = _Voxels[x + y * numPointsPerAxis + (z + 1) * numPointsPerAxis * numPointsPerAxis].value;
	cube[5] = _Voxels[(x + 1) + y * numPointsPerAxis + (z + 1) * numPointsPerAxis * numPointsPerAxis].value;
	cube[6] = _Voxels[(x + 1) + (y + 1) * numPointsPerAxis + (z + 1) * numPointsPerAxis * numPointsPerAxis].value;
	cube[7] = _Voxels[x + (y + 1) * numPointsPerAxis + (z + 1) * numPointsPerAxis * numPointsPerAxis].value;
}

// GetOffset finds the approximate point of intersection of the surface
// between two points with the values v1 and v2
float GetOffset(float v1, float v2)
{
	float delta = v2 - v1;
	return (delta == 0.0f) ? 0.5f : (0.0f - v1) / delta;
}

Vert CreateVertex(float3 position, float3 gridCentre, float3 size, float time)
{
	Vert vert;
	//conversion from arbitrary voxel grid position to actual world position
	vert.position = float4(centre +((position-gridCentre)/(numPointsPerAxis-1))*boundsSize, 1.0);

	float3 uv = position / size;
	vert.normal = _Normals.SampleLevel(_LinearClamp, uv, 0);
	vert.uv = uv;
	vert.discardTime = time;
	
	return vert;
}


[numthreads(numThreads, numThreads, numThreads)]
void CSMain(int3 id : SV_DispatchThreadID)
{
	//Dont generate verts at the edge as they dont have 
	//neighbours to make a cube from and the normal will 
	//not be correct around border.
	if (id.x >= numPointsPerAxis-1) return;
	if (id.y >= numPointsPerAxis-1) return;
	if (id.z >= numPointsPerAxis-1) return;

	float3 gridCentre = float3(numPointsPerAxis-1, numPointsPerAxis-1, numPointsPerAxis-1) / 2.0f;

	float cube[8];
	FillCube(id.x, id.y, id.z, cube);

	int i = 0;
	int flagIndex = 0;
	float3 edgeVertex[12];
	float discardTimes[12];

	//Find which vertices are inside of the surface and which are outside
	for (i = 0; i < 8; i++)
		if (cube[i] <= 0.0f) flagIndex |= 1 << i;

	//Find which edges are intersected by the surface
	int edgeFlags = CubeEdgeFlags[flagIndex];

	// no connections, return
	if (edgeFlags == 0) return;

	//Find the point of intersection of the surface with each edge
	for (i = 0; i < 12; i++)
	{
		//if there is an intersection on this edge
		if ((edgeFlags & (1 << i)) != 0)
		{
			float offset = GetOffset(cube[edgeConnection[i].x], cube[edgeConnection[i].y]);

			uint3 ind = id+vertexOffset[edgeConnection[i].x];
			int indx = indexFromCoord(ind.x,ind.y,ind.z);
			float discarded =  _Voxels[indx].discarded;
			if(discarded<=0)
			{
				ind = id+vertexOffset[edgeConnection[i].y];
				indx = indexFromCoord(ind.x,ind.y,ind.z);
				discarded =  _Voxels[indx].discarded;
			}
			
			edgeVertex[i] = float3(id) + (vertexOffset[edgeConnection[i].x] + offset * edgeDirection[i]);
			discardTimes[i] = discarded;
		}
	}

	float3 size = float3(numPointsPerAxis-1, numPointsPerAxis-1, numPointsPerAxis-1);

	//Save the triangles that were found. There can be up to five per cube
	for (i = 0; i < 5; i++)
	{
		//If the connection table is not -1 then this a triangle.
		if (TriangleConnectionTable[flagIndex * 16 + 3 * i] >= 0)
		{
			int id1=TriangleConnectionTable[flagIndex * 16 + (3 * i + 0)];
			int id2=TriangleConnectionTable[flagIndex * 16 + (3 * i + 1)];
			int id3=TriangleConnectionTable[flagIndex * 16 + (3 * i + 2)];
			
			float discardTime = max(max(discardTimes[id1],discardTimes[id2]),discardTimes[id3]);

			float3 vertexPos = edgeVertex[id1];
			Vert v1 = CreateVertex(vertexPos,gridCentre, size,discardTime);

			vertexPos = edgeVertex[id2];
			Vert v2 = CreateVertex(vertexPos,gridCentre, size,discardTime);

			vertexPos = edgeVertex[id3];
			Vert v3 = CreateVertex(vertexPos,gridCentre, size,discardTime);

			Triangle tri;
			tri.v1 = v1;
			tri.v2 = v2;
			tri.v3 = v3;
			
			_Vertices.Append(tri);
		}
	}

}

AppendStructuredBuffer<float3> surfacePoints;
StructuredBuffer<float3> surfacePointsRead;
RWStructuredBuffer<int> helperArgs;

[numthreads(numThreads, numThreads, numThreads)]
void FindSurfacePoints(int3 id : SV_DispatchThreadID)
{
	if(id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis)
		return;
	
	int index = indexFromCoord(id.x,id.y,id.z);
	if(abs(_Voxels[index].value)<=0.01f && _Voxels[index].discarded<=0)
	{
		float3 pos = -centre+id*(boundsSize / (numPointsPerAxis - 1))-boundsSize/2;
		surfacePoints.Append(pos);
		InterlockedAdd(helperArgs[0],1);
	}
}

[numthreads(numThreads, numThreads, numThreads)]
void ClearDiscardedVoxels(int3 id : SV_DispatchThreadID)
{
	if(id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis)
		return;
	
	int index = indexFromCoord(id.x,id.y,id.z);
	if(_Voxels[index].discarded>0)
	{
		_Voxels[index].discarded=0;

		float3 pos = -centre+id*(boundsSize / (numPointsPerAxis - 1))-boundsSize/2;
		float distance = boundsSize;
		
		for (int i=0;i<helperArgs[0];i++)
		{
			float3 p = surfacePointsRead[i];
			distance = min(distance,length(pos-p));
		}

		_Voxels[index].value=-distance;
	}
}